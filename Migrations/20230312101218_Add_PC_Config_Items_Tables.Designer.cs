// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eComMaster.Data;

#nullable disable

namespace eComMaster.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230312101218_Add_PC_Config_Items_Tables")]
    partial class Add_PC_Config_Items_Tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("eComMaster.Models.Auth.AuthUser", b =>
                {
                    b.Property<int>("USER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PASSWORD")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PRIVILEGE_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("USERNAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("USER_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("USER_ID");

                    b.ToTable("AuthUser");
                });

            modelBuilder.Entity("eComMaster.Models.CustomerData.Customer", b =>
                {
                    b.Property<int>("CUSTOMER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ADDRESS")
                        .HasColumnType("longtext");

                    b.Property<int>("AuthUser")
                        .HasColumnType("int");

                    b.Property<string>("CONTACT_NUM")
                        .HasColumnType("longtext");

                    b.Property<string>("CUSTOMER_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GENDER")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PENALTY_FEE")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("CUSTOMER_ID");

                    b.HasIndex("AuthUser");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigCasing", b =>
                {
                    b.Property<int>("CONFIG_CASING_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CASING_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("CASING_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CASING_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("CONFIG_CASING_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigCasing");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigDisplay", b =>
                {
                    b.Property<int>("CONFIG_DISPLAY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DISPLAY_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("DISPLAY_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DISPLAY_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("CONFIG_DISPLAY_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigDisplay");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigGraphics", b =>
                {
                    b.Property<int>("CONFIG_GRAPHICS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("GRAPHICS_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("GRAPHICS_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GRAPHICS_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("CONFIG_GRAPHICS_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigGraphics");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigMemory", b =>
                {
                    b.Property<int>("CONFIG_MEMORY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("MEMORY_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("MEMORY_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MEMORY_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("CONFIG_MEMORY_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigMemory");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigMisc", b =>
                {
                    b.Property<int>("CONFIG_MISC_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("MISC_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("MISC_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MISC_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("CONFIG_MISC_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigMisc");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigPorts", b =>
                {
                    b.Property<int>("CONFIG_PORTS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PORTS_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("PORTS_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PORTS_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CONFIG_PORTS_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigPorts");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigPower", b =>
                {
                    b.Property<int>("CONFIG_POWER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("POWER_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("POWER_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("POWER_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CONFIG_POWER_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigPower");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigProcessor", b =>
                {
                    b.Property<int>("CONFIG_PROCESSOR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PROCESSOR_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("PROCESSOR_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PROCESSOR_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CONFIG_PROCESSOR_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigProcessor");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigStorage", b =>
                {
                    b.Property<int>("CONFIG_STORAGE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BASE_PRICE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("STORAGE_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("STORAGE_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("STORAGE_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CONFIG_STORAGE_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConfigStorage");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.PcCategory", b =>
                {
                    b.Property<int>("PC_CATEGORY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PC_CATEGORY_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("PC_CATEGORY_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PC_CATEGORY_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PC_CATEGORY_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PcCategory");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.PcSeries", b =>
                {
                    b.Property<int>("PC_SERIES_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DELETED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PC_SERIES_DESCRIPTION")
                        .HasColumnType("longtext");

                    b.Property<string>("PC_SERIES_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PC_SERIES_STATUS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PcSeries")
                        .HasColumnType("int");

                    b.HasKey("PC_SERIES_ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PcSeries");

                    b.ToTable("PcSeries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eComMaster.Models.CustomerData.Customer", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "USER_ID")
                        .WithMany()
                        .HasForeignKey("AuthUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("USER_ID");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigCasing", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigDisplay", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigGraphics", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigMemory", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigMisc", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigPorts", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigPower", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigProcessor", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.ConfigItems.ConfigStorage", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.PcCategory", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");
                });

            modelBuilder.Entity("eComMaster.Models.MasterData.PcSeries", b =>
                {
                    b.HasOne("eComMaster.Models.Auth.AuthUser", "CREATED_BY")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "DELETED_BY")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("eComMaster.Models.Auth.AuthUser", "MODIFIED_BY")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("eComMaster.Models.MasterData.PcCategory", "PC_CATEGORY_ID")
                        .WithMany()
                        .HasForeignKey("PcSeries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CREATED_BY");

                    b.Navigation("DELETED_BY");

                    b.Navigation("MODIFIED_BY");

                    b.Navigation("PC_CATEGORY_ID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
